
Wiper_control_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a60  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c08  08000c10  00010c10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c08  08000c08  00010c10  2**0
                  CONTENTS
  4 .ARM          00000000  08000c08  08000c08  00010c10  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c08  08000c10  00010c10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c08  08000c08  00010c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c0c  08000c0c  00010c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010c10  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010c10  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000bd2  00000000  00000000  00010c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000334  00000000  00000000  00011812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000100  00000000  00000000  00011b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000d8  00000000  00000000  00011c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000024b7  00000000  00000000  00011d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001169  00000000  00000000  000141d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009cdb  00000000  00000000  00015340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001f01b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000344  00000000  00000000  0001f06c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000bf0 	.word	0x08000bf0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000bf0 	.word	0x08000bf0

080001e8 <GPIO_PeriClockControl>:
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d161      	bne.n	80002be <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a33      	ldr	r2, [pc, #204]	; (80002cc <GPIO_PeriClockControl+0xe4>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d106      	bne.n	8000210 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000202:	4b33      	ldr	r3, [pc, #204]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000206:	4a32      	ldr	r2, [pc, #200]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DI();
		}*/
	}

}
 800020e:	e056      	b.n	80002be <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a30      	ldr	r2, [pc, #192]	; (80002d4 <GPIO_PeriClockControl+0xec>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d106      	bne.n	8000226 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000218:	4b2d      	ldr	r3, [pc, #180]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a2c      	ldr	r2, [pc, #176]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000224:	e04b      	b.n	80002be <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a2b      	ldr	r2, [pc, #172]	; (80002d8 <GPIO_PeriClockControl+0xf0>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800022e:	4b28      	ldr	r3, [pc, #160]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a27      	ldr	r2, [pc, #156]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
}
 800023a:	e040      	b.n	80002be <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a27      	ldr	r2, [pc, #156]	; (80002dc <GPIO_PeriClockControl+0xf4>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000244:	4b22      	ldr	r3, [pc, #136]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a21      	ldr	r2, [pc, #132]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e035      	b.n	80002be <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a22      	ldr	r2, [pc, #136]	; (80002e0 <GPIO_PeriClockControl+0xf8>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800025a:	4b1d      	ldr	r3, [pc, #116]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a1c      	ldr	r2, [pc, #112]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 8000260:	f043 0310 	orr.w	r3, r3, #16
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e02a      	b.n	80002be <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a1e      	ldr	r2, [pc, #120]	; (80002e4 <GPIO_PeriClockControl+0xfc>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000270:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a16      	ldr	r2, [pc, #88]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e01f      	b.n	80002be <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a19      	ldr	r2, [pc, #100]	; (80002e8 <GPIO_PeriClockControl+0x100>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000286:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a11      	ldr	r2, [pc, #68]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 800028c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e014      	b.n	80002be <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a15      	ldr	r2, [pc, #84]	; (80002ec <GPIO_PeriClockControl+0x104>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800029c:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a0b      	ldr	r2, [pc, #44]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 80002a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e009      	b.n	80002be <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a10      	ldr	r2, [pc, #64]	; (80002f0 <GPIO_PeriClockControl+0x108>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d105      	bne.n	80002be <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 80002b2:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a06      	ldr	r2, [pc, #24]	; (80002d0 <GPIO_PeriClockControl+0xe8>)
 80002b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40020000 	.word	0x40020000
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40020400 	.word	0x40020400
 80002d8:	40020800 	.word	0x40020800
 80002dc:	40020c00 	.word	0x40020c00
 80002e0:	40021000 	.word	0x40021000
 80002e4:	40021400 	.word	0x40021400
 80002e8:	40021800 	.word	0x40021800
 80002ec:	40021c00 	.word	0x40021c00
 80002f0:	40022000 	.word	0x40022000

080002f4 <GPIO_Init>:
 * @return            -
 *
 * @Note              -
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b086      	sub	sp, #24
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 80002fc:	2300      	movs	r3, #0
 80002fe:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2101      	movs	r1, #1
 8000306:	4618      	mov	r0, r3
 8000308:	f7ff ff6e 	bl	80001e8 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	795b      	ldrb	r3, [r3, #5]
 8000310:	2b03      	cmp	r3, #3
 8000312:	d820      	bhi.n	8000356 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	795b      	ldrb	r3, [r3, #5]
 8000318:	461a      	mov	r2, r3
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	791b      	ldrb	r3, [r3, #4]
 800031e:	005b      	lsls	r3, r3, #1
 8000320:	fa02 f303 	lsl.w	r3, r2, r3
 8000324:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	791b      	ldrb	r3, [r3, #4]
 8000330:	005b      	lsls	r3, r3, #1
 8000332:	2103      	movs	r1, #3
 8000334:	fa01 f303 	lsl.w	r3, r1, r3
 8000338:	43db      	mvns	r3, r3
 800033a:	4619      	mov	r1, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	400a      	ands	r2, r1
 8000342:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	6819      	ldr	r1, [r3, #0]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	697a      	ldr	r2, [r7, #20]
 8000350:	430a      	orrs	r2, r1
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	e0cb      	b.n	80004ee <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	795b      	ldrb	r3, [r3, #5]
 800035a:	2b04      	cmp	r3, #4
 800035c:	d117      	bne.n	800038e <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800035e:	4b4b      	ldr	r3, [pc, #300]	; (800048c <GPIO_Init+0x198>)
 8000360:	68db      	ldr	r3, [r3, #12]
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	7912      	ldrb	r2, [r2, #4]
 8000366:	4611      	mov	r1, r2
 8000368:	2201      	movs	r2, #1
 800036a:	408a      	lsls	r2, r1
 800036c:	4611      	mov	r1, r2
 800036e:	4a47      	ldr	r2, [pc, #284]	; (800048c <GPIO_Init+0x198>)
 8000370:	430b      	orrs	r3, r1
 8000372:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000374:	4b45      	ldr	r3, [pc, #276]	; (800048c <GPIO_Init+0x198>)
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	7912      	ldrb	r2, [r2, #4]
 800037c:	4611      	mov	r1, r2
 800037e:	2201      	movs	r2, #1
 8000380:	408a      	lsls	r2, r1
 8000382:	43d2      	mvns	r2, r2
 8000384:	4611      	mov	r1, r2
 8000386:	4a41      	ldr	r2, [pc, #260]	; (800048c <GPIO_Init+0x198>)
 8000388:	400b      	ands	r3, r1
 800038a:	6093      	str	r3, [r2, #8]
 800038c:	e035      	b.n	80003fa <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	795b      	ldrb	r3, [r3, #5]
 8000392:	2b05      	cmp	r3, #5
 8000394:	d117      	bne.n	80003c6 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000396:	4b3d      	ldr	r3, [pc, #244]	; (800048c <GPIO_Init+0x198>)
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	687a      	ldr	r2, [r7, #4]
 800039c:	7912      	ldrb	r2, [r2, #4]
 800039e:	4611      	mov	r1, r2
 80003a0:	2201      	movs	r2, #1
 80003a2:	408a      	lsls	r2, r1
 80003a4:	4611      	mov	r1, r2
 80003a6:	4a39      	ldr	r2, [pc, #228]	; (800048c <GPIO_Init+0x198>)
 80003a8:	430b      	orrs	r3, r1
 80003aa:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003ac:	4b37      	ldr	r3, [pc, #220]	; (800048c <GPIO_Init+0x198>)
 80003ae:	68db      	ldr	r3, [r3, #12]
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	7912      	ldrb	r2, [r2, #4]
 80003b4:	4611      	mov	r1, r2
 80003b6:	2201      	movs	r2, #1
 80003b8:	408a      	lsls	r2, r1
 80003ba:	43d2      	mvns	r2, r2
 80003bc:	4611      	mov	r1, r2
 80003be:	4a33      	ldr	r2, [pc, #204]	; (800048c <GPIO_Init+0x198>)
 80003c0:	400b      	ands	r3, r1
 80003c2:	60d3      	str	r3, [r2, #12]
 80003c4:	e019      	b.n	80003fa <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	795b      	ldrb	r3, [r3, #5]
 80003ca:	2b06      	cmp	r3, #6
 80003cc:	d115      	bne.n	80003fa <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003ce:	4b2f      	ldr	r3, [pc, #188]	; (800048c <GPIO_Init+0x198>)
 80003d0:	689b      	ldr	r3, [r3, #8]
 80003d2:	687a      	ldr	r2, [r7, #4]
 80003d4:	7912      	ldrb	r2, [r2, #4]
 80003d6:	4611      	mov	r1, r2
 80003d8:	2201      	movs	r2, #1
 80003da:	408a      	lsls	r2, r1
 80003dc:	4611      	mov	r1, r2
 80003de:	4a2b      	ldr	r2, [pc, #172]	; (800048c <GPIO_Init+0x198>)
 80003e0:	430b      	orrs	r3, r1
 80003e2:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003e4:	4b29      	ldr	r3, [pc, #164]	; (800048c <GPIO_Init+0x198>)
 80003e6:	68db      	ldr	r3, [r3, #12]
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	7912      	ldrb	r2, [r2, #4]
 80003ec:	4611      	mov	r1, r2
 80003ee:	2201      	movs	r2, #1
 80003f0:	408a      	lsls	r2, r1
 80003f2:	4611      	mov	r1, r2
 80003f4:	4a25      	ldr	r2, [pc, #148]	; (800048c <GPIO_Init+0x198>)
 80003f6:	430b      	orrs	r3, r1
 80003f8:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	791b      	ldrb	r3, [r3, #4]
 80003fe:	089b      	lsrs	r3, r3, #2
 8000400:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	791b      	ldrb	r3, [r3, #4]
 8000406:	f003 0303 	and.w	r3, r3, #3
 800040a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a1f      	ldr	r2, [pc, #124]	; (8000490 <GPIO_Init+0x19c>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d04e      	beq.n	80004b4 <GPIO_Init+0x1c0>
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a1e      	ldr	r2, [pc, #120]	; (8000494 <GPIO_Init+0x1a0>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d032      	beq.n	8000486 <GPIO_Init+0x192>
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a1c      	ldr	r2, [pc, #112]	; (8000498 <GPIO_Init+0x1a4>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d02b      	beq.n	8000482 <GPIO_Init+0x18e>
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a1b      	ldr	r2, [pc, #108]	; (800049c <GPIO_Init+0x1a8>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d024      	beq.n	800047e <GPIO_Init+0x18a>
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a19      	ldr	r2, [pc, #100]	; (80004a0 <GPIO_Init+0x1ac>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d01d      	beq.n	800047a <GPIO_Init+0x186>
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a18      	ldr	r2, [pc, #96]	; (80004a4 <GPIO_Init+0x1b0>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d016      	beq.n	8000476 <GPIO_Init+0x182>
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a16      	ldr	r2, [pc, #88]	; (80004a8 <GPIO_Init+0x1b4>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d00f      	beq.n	8000472 <GPIO_Init+0x17e>
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a15      	ldr	r2, [pc, #84]	; (80004ac <GPIO_Init+0x1b8>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d008      	beq.n	800046e <GPIO_Init+0x17a>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a13      	ldr	r2, [pc, #76]	; (80004b0 <GPIO_Init+0x1bc>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d101      	bne.n	800046a <GPIO_Init+0x176>
 8000466:	2308      	movs	r3, #8
 8000468:	e025      	b.n	80004b6 <GPIO_Init+0x1c2>
 800046a:	2300      	movs	r3, #0
 800046c:	e023      	b.n	80004b6 <GPIO_Init+0x1c2>
 800046e:	2307      	movs	r3, #7
 8000470:	e021      	b.n	80004b6 <GPIO_Init+0x1c2>
 8000472:	2306      	movs	r3, #6
 8000474:	e01f      	b.n	80004b6 <GPIO_Init+0x1c2>
 8000476:	2305      	movs	r3, #5
 8000478:	e01d      	b.n	80004b6 <GPIO_Init+0x1c2>
 800047a:	2304      	movs	r3, #4
 800047c:	e01b      	b.n	80004b6 <GPIO_Init+0x1c2>
 800047e:	2303      	movs	r3, #3
 8000480:	e019      	b.n	80004b6 <GPIO_Init+0x1c2>
 8000482:	2302      	movs	r3, #2
 8000484:	e017      	b.n	80004b6 <GPIO_Init+0x1c2>
 8000486:	2301      	movs	r3, #1
 8000488:	e015      	b.n	80004b6 <GPIO_Init+0x1c2>
 800048a:	bf00      	nop
 800048c:	40013c00 	.word	0x40013c00
 8000490:	40020000 	.word	0x40020000
 8000494:	40020400 	.word	0x40020400
 8000498:	40020800 	.word	0x40020800
 800049c:	40020c00 	.word	0x40020c00
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40021400 	.word	0x40021400
 80004a8:	40021800 	.word	0x40021800
 80004ac:	40021c00 	.word	0x40021c00
 80004b0:	40022000 	.word	0x40022000
 80004b4:	2300      	movs	r3, #0
 80004b6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80004b8:	4b59      	ldr	r3, [pc, #356]	; (8000620 <GPIO_Init+0x32c>)
 80004ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004bc:	4a58      	ldr	r2, [pc, #352]	; (8000620 <GPIO_Init+0x32c>)
 80004be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004c2:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80004c4:	7c7a      	ldrb	r2, [r7, #17]
 80004c6:	7cbb      	ldrb	r3, [r7, #18]
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	fa02 f103 	lsl.w	r1, r2, r3
 80004ce:	4a55      	ldr	r2, [pc, #340]	; (8000624 <GPIO_Init+0x330>)
 80004d0:	7cfb      	ldrb	r3, [r7, #19]
 80004d2:	3302      	adds	r3, #2
 80004d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80004d8:	4b53      	ldr	r3, [pc, #332]	; (8000628 <GPIO_Init+0x334>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	7912      	ldrb	r2, [r2, #4]
 80004e0:	4611      	mov	r1, r2
 80004e2:	2201      	movs	r2, #1
 80004e4:	408a      	lsls	r2, r1
 80004e6:	4611      	mov	r1, r2
 80004e8:	4a4f      	ldr	r2, [pc, #316]	; (8000628 <GPIO_Init+0x334>)
 80004ea:	430b      	orrs	r3, r1
 80004ec:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	799b      	ldrb	r3, [r3, #6]
 80004f2:	461a      	mov	r2, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	791b      	ldrb	r3, [r3, #4]
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	fa02 f303 	lsl.w	r3, r2, r3
 80004fe:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	689a      	ldr	r2, [r3, #8]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	791b      	ldrb	r3, [r3, #4]
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	2103      	movs	r1, #3
 800050e:	fa01 f303 	lsl.w	r3, r1, r3
 8000512:	43db      	mvns	r3, r3
 8000514:	4619      	mov	r1, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	400a      	ands	r2, r1
 800051c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	6899      	ldr	r1, [r3, #8]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	697a      	ldr	r2, [r7, #20]
 800052a:	430a      	orrs	r2, r1
 800052c:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	79db      	ldrb	r3, [r3, #7]
 8000532:	461a      	mov	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	791b      	ldrb	r3, [r3, #4]
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	fa02 f303 	lsl.w	r3, r2, r3
 800053e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	68da      	ldr	r2, [r3, #12]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	791b      	ldrb	r3, [r3, #4]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	2103      	movs	r1, #3
 800054e:	fa01 f303 	lsl.w	r3, r1, r3
 8000552:	43db      	mvns	r3, r3
 8000554:	4619      	mov	r1, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	400a      	ands	r2, r1
 800055c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	68d9      	ldr	r1, [r3, #12]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	697a      	ldr	r2, [r7, #20]
 800056a:	430a      	orrs	r2, r1
 800056c:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	7a1b      	ldrb	r3, [r3, #8]
 8000572:	461a      	mov	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	791b      	ldrb	r3, [r3, #4]
 8000578:	fa02 f303 	lsl.w	r3, r2, r3
 800057c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	685a      	ldr	r2, [r3, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	791b      	ldrb	r3, [r3, #4]
 8000588:	4619      	mov	r1, r3
 800058a:	2301      	movs	r3, #1
 800058c:	408b      	lsls	r3, r1
 800058e:	43db      	mvns	r3, r3
 8000590:	4619      	mov	r1, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	400a      	ands	r2, r1
 8000598:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	6859      	ldr	r1, [r3, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	697a      	ldr	r2, [r7, #20]
 80005a6:	430a      	orrs	r2, r1
 80005a8:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	795b      	ldrb	r3, [r3, #5]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d131      	bne.n	8000616 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	791b      	ldrb	r3, [r3, #4]
 80005b6:	08db      	lsrs	r3, r3, #3
 80005b8:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	791b      	ldrb	r3, [r3, #4]
 80005be:	f003 0307 	and.w	r3, r3, #7
 80005c2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	7c3a      	ldrb	r2, [r7, #16]
 80005ca:	3208      	adds	r2, #8
 80005cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	220f      	movs	r2, #15
 80005d6:	fa02 f303 	lsl.w	r3, r2, r3
 80005da:	43db      	mvns	r3, r3
 80005dc:	4618      	mov	r0, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	7c3a      	ldrb	r2, [r7, #16]
 80005e4:	4001      	ands	r1, r0
 80005e6:	3208      	adds	r2, #8
 80005e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	7c3a      	ldrb	r2, [r7, #16]
 80005f2:	3208      	adds	r2, #8
 80005f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	7a5b      	ldrb	r3, [r3, #9]
 80005fc:	461a      	mov	r2, r3
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	4618      	mov	r0, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	7c3a      	ldrb	r2, [r7, #16]
 800060e:	4301      	orrs	r1, r0
 8000610:	3208      	adds	r2, #8
 8000612:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000616:	bf00      	nop
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40013800 	.word	0x40013800
 8000628:	40013c00 	.word	0x40013c00

0800062c <GPIO_ReadFromInputPin>:
 * @return            -   0 or 1
 *
 * @Note              -
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	691a      	ldr	r2, [r3, #16]
 800063c:	78fb      	ldrb	r3, [r7, #3]
 800063e:	fa22 f303 	lsr.w	r3, r2, r3
 8000642:	b2db      	uxtb	r3, r3
 8000644:	f003 0301 	and.w	r3, r3, #1
 8000648:	73fb      	strb	r3, [r7, #15]

   return value;
 800064a:	7bfb      	ldrb	r3, [r7, #15]
}
 800064c:	4618      	mov	r0, r3
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <GPIO_WriteToOutputPin>:
 * @return            -
 *
 * @Note              -
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	70fb      	strb	r3, [r7, #3]
 8000664:	4613      	mov	r3, r2
 8000666:	70bb      	strb	r3, [r7, #2]

	if(Value == GPIO_PIN_SET)
 8000668:	78bb      	ldrb	r3, [r7, #2]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d109      	bne.n	8000682 <GPIO_WriteToOutputPin+0x2a>
	{
		//write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= ( 1 << PinNumber);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	78fa      	ldrb	r2, [r7, #3]
 8000674:	2101      	movs	r1, #1
 8000676:	fa01 f202 	lsl.w	r2, r1, r2
 800067a:	431a      	orrs	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	615a      	str	r2, [r3, #20]
	}else
	{
		//write 0
		pGPIOx->ODR &= ~( 1 << PinNumber);
	}
}
 8000680:	e009      	b.n	8000696 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~( 1 << PinNumber);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	78fa      	ldrb	r2, [r7, #3]
 8000688:	2101      	movs	r1, #1
 800068a:	fa01 f202 	lsl.w	r2, r1, r2
 800068e:	43d2      	mvns	r2, r2
 8000690:	401a      	ands	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	615a      	str	r2, [r3, #20]
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <GPIO_ToggleOutputPin>:
 * @return            -
 *
 * @Note              -
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80006a2:	b480      	push	{r7}
 80006a4:	b083      	sub	sp, #12
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
 80006aa:	460b      	mov	r3, r1
 80006ac:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR  ^= ( 1 << PinNumber);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	78fa      	ldrb	r2, [r7, #3]
 80006b4:	2101      	movs	r1, #1
 80006b6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ba:	405a      	eors	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	615a      	str	r2, [r3, #20]
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <wiper_on>:
#include <stdint.h>
#include <stdio.h>
#define BTN_PRESSED ENABLE

int wiper_on(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_15);
 80006d0:	210f      	movs	r1, #15
 80006d2:	4826      	ldr	r0, [pc, #152]	; (800076c <wiper_on+0xa0>)
 80006d4:	f7ff ffe5 	bl	80006a2 <GPIO_ToggleOutputPin>
	delay();
 80006d8:	f000 f84c 	bl	8000774 <delay>
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_15,0 );
 80006dc:	2200      	movs	r2, #0
 80006de:	210f      	movs	r1, #15
 80006e0:	4822      	ldr	r0, [pc, #136]	; (800076c <wiper_on+0xa0>)
 80006e2:	f7ff ffb9 	bl	8000658 <GPIO_WriteToOutputPin>

	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 80006e6:	210c      	movs	r1, #12
 80006e8:	4820      	ldr	r0, [pc, #128]	; (800076c <wiper_on+0xa0>)
 80006ea:	f7ff ffda 	bl	80006a2 <GPIO_ToggleOutputPin>
	delay();
 80006ee:	f000 f841 	bl	8000774 <delay>
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_12,0 );
 80006f2:	2200      	movs	r2, #0
 80006f4:	210c      	movs	r1, #12
 80006f6:	481d      	ldr	r0, [pc, #116]	; (800076c <wiper_on+0xa0>)
 80006f8:	f7ff ffae 	bl	8000658 <GPIO_WriteToOutputPin>

	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_13);
 80006fc:	210d      	movs	r1, #13
 80006fe:	481b      	ldr	r0, [pc, #108]	; (800076c <wiper_on+0xa0>)
 8000700:	f7ff ffcf 	bl	80006a2 <GPIO_ToggleOutputPin>
	delay();
 8000704:	f000 f836 	bl	8000774 <delay>
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_13,0 );
 8000708:	2200      	movs	r2, #0
 800070a:	210d      	movs	r1, #13
 800070c:	4817      	ldr	r0, [pc, #92]	; (800076c <wiper_on+0xa0>)
 800070e:	f7ff ffa3 	bl	8000658 <GPIO_WriteToOutputPin>


	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_13);
 8000712:	210d      	movs	r1, #13
 8000714:	4815      	ldr	r0, [pc, #84]	; (800076c <wiper_on+0xa0>)
 8000716:	f7ff ffc4 	bl	80006a2 <GPIO_ToggleOutputPin>
	delay();
 800071a:	f000 f82b 	bl	8000774 <delay>
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_13,0 );
 800071e:	2200      	movs	r2, #0
 8000720:	210d      	movs	r1, #13
 8000722:	4812      	ldr	r0, [pc, #72]	; (800076c <wiper_on+0xa0>)
 8000724:	f7ff ff98 	bl	8000658 <GPIO_WriteToOutputPin>

	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 8000728:	210c      	movs	r1, #12
 800072a:	4810      	ldr	r0, [pc, #64]	; (800076c <wiper_on+0xa0>)
 800072c:	f7ff ffb9 	bl	80006a2 <GPIO_ToggleOutputPin>
	delay();
 8000730:	f000 f820 	bl	8000774 <delay>
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_12,0 );
 8000734:	2200      	movs	r2, #0
 8000736:	210c      	movs	r1, #12
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <wiper_on+0xa0>)
 800073a:	f7ff ff8d 	bl	8000658 <GPIO_WriteToOutputPin>

	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_15);
 800073e:	210f      	movs	r1, #15
 8000740:	480a      	ldr	r0, [pc, #40]	; (800076c <wiper_on+0xa0>)
 8000742:	f7ff ffae 	bl	80006a2 <GPIO_ToggleOutputPin>
	delay();
 8000746:	f000 f815 	bl	8000774 <delay>
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_15,0 );
 800074a:	2200      	movs	r2, #0
 800074c:	210f      	movs	r1, #15
 800074e:	4807      	ldr	r0, [pc, #28]	; (800076c <wiper_on+0xa0>)
 8000750:	f7ff ff82 	bl	8000658 <GPIO_WriteToOutputPin>

	if (GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0))
 8000754:	2100      	movs	r1, #0
 8000756:	4806      	ldr	r0, [pc, #24]	; (8000770 <wiper_on+0xa4>)
 8000758:	f7ff ff68 	bl	800062c <GPIO_ReadFromInputPin>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <wiper_on+0x9a>
			return 1;
 8000762:	2301      	movs	r3, #1
 8000764:	e000      	b.n	8000768 <wiper_on+0x9c>
		else
			return 0;
 8000766:	2300      	movs	r3, #0

}
 8000768:	4618      	mov	r0, r3
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40020c00 	.word	0x40020c00
 8000770:	40020000 	.word	0x40020000

08000774 <delay>:

void delay(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 50000000; i++);
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	e002      	b.n	8000786 <delay+0x12>
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3301      	adds	r3, #1
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4a04      	ldr	r2, [pc, #16]	; (800079c <delay+0x28>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d9f8      	bls.n	8000780 <delay+0xc>
}
 800078e:	bf00      	nop
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	02faf07f 	.word	0x02faf07f

080007a0 <delay_4_hz>:
void delay_4_hz(void){
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 25000000; i++);
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	e002      	b.n	80007b2 <delay_4_hz+0x12>
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3301      	adds	r3, #1
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <delay_4_hz+0x28>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d9f8      	bls.n	80007ac <delay_4_hz+0xc>
}
 80007ba:	bf00      	nop
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	017d783f 	.word	0x017d783f

080007cc <delay_8_hz>:
void delay_8_hz(void){
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 7500000; i++);
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	e002      	b.n	80007de <delay_8_hz+0x12>
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3301      	adds	r3, #1
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <delay_8_hz+0x28>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d9f8      	bls.n	80007d8 <delay_8_hz+0xc>
}
 80007e6:	bf00      	nop
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	007270df 	.word	0x007270df

080007f8 <ACC_mode_on>:

void ACC_mode_on(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_14);
 80007fc:	210e      	movs	r1, #14
 80007fe:	4802      	ldr	r0, [pc, #8]	; (8000808 <ACC_mode_on+0x10>)
 8000800:	f7ff ff4f 	bl	80006a2 <GPIO_ToggleOutputPin>
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40020c00 	.word	0x40020c00

0800080c <igniton_off>:

void igniton_off(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_14, 0);
 8000810:	2200      	movs	r2, #0
 8000812:	210e      	movs	r1, #14
 8000814:	4802      	ldr	r0, [pc, #8]	; (8000820 <igniton_off+0x14>)
 8000816:	f7ff ff1f 	bl	8000658 <GPIO_WriteToOutputPin>
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40020c00 	.word	0x40020c00

08000824 <wiper_speed_changes_4_Hz>:


int wiper_speed_changes_4_Hz(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_15);
 8000828:	210f      	movs	r1, #15
 800082a:	4826      	ldr	r0, [pc, #152]	; (80008c4 <wiper_speed_changes_4_Hz+0xa0>)
 800082c:	f7ff ff39 	bl	80006a2 <GPIO_ToggleOutputPin>
	delay_4_hz();
 8000830:	f7ff ffb6 	bl	80007a0 <delay_4_hz>
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_15,0 );
 8000834:	2200      	movs	r2, #0
 8000836:	210f      	movs	r1, #15
 8000838:	4822      	ldr	r0, [pc, #136]	; (80008c4 <wiper_speed_changes_4_Hz+0xa0>)
 800083a:	f7ff ff0d 	bl	8000658 <GPIO_WriteToOutputPin>

	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 800083e:	210c      	movs	r1, #12
 8000840:	4820      	ldr	r0, [pc, #128]	; (80008c4 <wiper_speed_changes_4_Hz+0xa0>)
 8000842:	f7ff ff2e 	bl	80006a2 <GPIO_ToggleOutputPin>
	delay_4_hz();
 8000846:	f7ff ffab 	bl	80007a0 <delay_4_hz>
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_12,0 );
 800084a:	2200      	movs	r2, #0
 800084c:	210c      	movs	r1, #12
 800084e:	481d      	ldr	r0, [pc, #116]	; (80008c4 <wiper_speed_changes_4_Hz+0xa0>)
 8000850:	f7ff ff02 	bl	8000658 <GPIO_WriteToOutputPin>

	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_13);
 8000854:	210d      	movs	r1, #13
 8000856:	481b      	ldr	r0, [pc, #108]	; (80008c4 <wiper_speed_changes_4_Hz+0xa0>)
 8000858:	f7ff ff23 	bl	80006a2 <GPIO_ToggleOutputPin>
	delay_4_hz();
 800085c:	f7ff ffa0 	bl	80007a0 <delay_4_hz>
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_13,0 );
 8000860:	2200      	movs	r2, #0
 8000862:	210d      	movs	r1, #13
 8000864:	4817      	ldr	r0, [pc, #92]	; (80008c4 <wiper_speed_changes_4_Hz+0xa0>)
 8000866:	f7ff fef7 	bl	8000658 <GPIO_WriteToOutputPin>

	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_13);
 800086a:	210d      	movs	r1, #13
 800086c:	4815      	ldr	r0, [pc, #84]	; (80008c4 <wiper_speed_changes_4_Hz+0xa0>)
 800086e:	f7ff ff18 	bl	80006a2 <GPIO_ToggleOutputPin>
	delay_4_hz();
 8000872:	f7ff ff95 	bl	80007a0 <delay_4_hz>
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_13,0 );
 8000876:	2200      	movs	r2, #0
 8000878:	210d      	movs	r1, #13
 800087a:	4812      	ldr	r0, [pc, #72]	; (80008c4 <wiper_speed_changes_4_Hz+0xa0>)
 800087c:	f7ff feec 	bl	8000658 <GPIO_WriteToOutputPin>

	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 8000880:	210c      	movs	r1, #12
 8000882:	4810      	ldr	r0, [pc, #64]	; (80008c4 <wiper_speed_changes_4_Hz+0xa0>)
 8000884:	f7ff ff0d 	bl	80006a2 <GPIO_ToggleOutputPin>
	delay_4_hz();
 8000888:	f7ff ff8a 	bl	80007a0 <delay_4_hz>
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_12,0 );
 800088c:	2200      	movs	r2, #0
 800088e:	210c      	movs	r1, #12
 8000890:	480c      	ldr	r0, [pc, #48]	; (80008c4 <wiper_speed_changes_4_Hz+0xa0>)
 8000892:	f7ff fee1 	bl	8000658 <GPIO_WriteToOutputPin>

	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_15);
 8000896:	210f      	movs	r1, #15
 8000898:	480a      	ldr	r0, [pc, #40]	; (80008c4 <wiper_speed_changes_4_Hz+0xa0>)
 800089a:	f7ff ff02 	bl	80006a2 <GPIO_ToggleOutputPin>
	delay_4_hz();
 800089e:	f7ff ff7f 	bl	80007a0 <delay_4_hz>
	GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_15,0 );
 80008a2:	2200      	movs	r2, #0
 80008a4:	210f      	movs	r1, #15
 80008a6:	4807      	ldr	r0, [pc, #28]	; (80008c4 <wiper_speed_changes_4_Hz+0xa0>)
 80008a8:	f7ff fed6 	bl	8000658 <GPIO_WriteToOutputPin>

	if (GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0))
 80008ac:	2100      	movs	r1, #0
 80008ae:	4806      	ldr	r0, [pc, #24]	; (80008c8 <wiper_speed_changes_4_Hz+0xa4>)
 80008b0:	f7ff febc 	bl	800062c <GPIO_ReadFromInputPin>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <wiper_speed_changes_4_Hz+0x9a>
			return 1;
 80008ba:	2301      	movs	r3, #1
 80008bc:	e000      	b.n	80008c0 <wiper_speed_changes_4_Hz+0x9c>
		else
			return 0;
 80008be:	2300      	movs	r3, #0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40020c00 	.word	0x40020c00
 80008c8:	40020000 	.word	0x40020000

080008cc <wiper_speed_changes_8_Hz>:

int wiper_speed_changes_8_Hz(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	        GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_15);
 80008d0:	210f      	movs	r1, #15
 80008d2:	4826      	ldr	r0, [pc, #152]	; (800096c <wiper_speed_changes_8_Hz+0xa0>)
 80008d4:	f7ff fee5 	bl	80006a2 <GPIO_ToggleOutputPin>
			delay_8_hz();
 80008d8:	f7ff ff78 	bl	80007cc <delay_8_hz>
			GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_15,0 );
 80008dc:	2200      	movs	r2, #0
 80008de:	210f      	movs	r1, #15
 80008e0:	4822      	ldr	r0, [pc, #136]	; (800096c <wiper_speed_changes_8_Hz+0xa0>)
 80008e2:	f7ff feb9 	bl	8000658 <GPIO_WriteToOutputPin>

			GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 80008e6:	210c      	movs	r1, #12
 80008e8:	4820      	ldr	r0, [pc, #128]	; (800096c <wiper_speed_changes_8_Hz+0xa0>)
 80008ea:	f7ff feda 	bl	80006a2 <GPIO_ToggleOutputPin>
			delay_8_hz();
 80008ee:	f7ff ff6d 	bl	80007cc <delay_8_hz>
			GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_12,0 );
 80008f2:	2200      	movs	r2, #0
 80008f4:	210c      	movs	r1, #12
 80008f6:	481d      	ldr	r0, [pc, #116]	; (800096c <wiper_speed_changes_8_Hz+0xa0>)
 80008f8:	f7ff feae 	bl	8000658 <GPIO_WriteToOutputPin>

			GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_13);
 80008fc:	210d      	movs	r1, #13
 80008fe:	481b      	ldr	r0, [pc, #108]	; (800096c <wiper_speed_changes_8_Hz+0xa0>)
 8000900:	f7ff fecf 	bl	80006a2 <GPIO_ToggleOutputPin>
			delay_8_hz();
 8000904:	f7ff ff62 	bl	80007cc <delay_8_hz>
			GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_13,0 );
 8000908:	2200      	movs	r2, #0
 800090a:	210d      	movs	r1, #13
 800090c:	4817      	ldr	r0, [pc, #92]	; (800096c <wiper_speed_changes_8_Hz+0xa0>)
 800090e:	f7ff fea3 	bl	8000658 <GPIO_WriteToOutputPin>

			GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_13);
 8000912:	210d      	movs	r1, #13
 8000914:	4815      	ldr	r0, [pc, #84]	; (800096c <wiper_speed_changes_8_Hz+0xa0>)
 8000916:	f7ff fec4 	bl	80006a2 <GPIO_ToggleOutputPin>
			delay_8_hz();
 800091a:	f7ff ff57 	bl	80007cc <delay_8_hz>
			GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_13,0 );
 800091e:	2200      	movs	r2, #0
 8000920:	210d      	movs	r1, #13
 8000922:	4812      	ldr	r0, [pc, #72]	; (800096c <wiper_speed_changes_8_Hz+0xa0>)
 8000924:	f7ff fe98 	bl	8000658 <GPIO_WriteToOutputPin>

			GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 8000928:	210c      	movs	r1, #12
 800092a:	4810      	ldr	r0, [pc, #64]	; (800096c <wiper_speed_changes_8_Hz+0xa0>)
 800092c:	f7ff feb9 	bl	80006a2 <GPIO_ToggleOutputPin>
			delay_8_hz();
 8000930:	f7ff ff4c 	bl	80007cc <delay_8_hz>
			GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_12,0 );
 8000934:	2200      	movs	r2, #0
 8000936:	210c      	movs	r1, #12
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <wiper_speed_changes_8_Hz+0xa0>)
 800093a:	f7ff fe8d 	bl	8000658 <GPIO_WriteToOutputPin>

			GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_15);
 800093e:	210f      	movs	r1, #15
 8000940:	480a      	ldr	r0, [pc, #40]	; (800096c <wiper_speed_changes_8_Hz+0xa0>)
 8000942:	f7ff feae 	bl	80006a2 <GPIO_ToggleOutputPin>
			delay_8_hz();
 8000946:	f7ff ff41 	bl	80007cc <delay_8_hz>
			GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_15,0 );
 800094a:	2200      	movs	r2, #0
 800094c:	210f      	movs	r1, #15
 800094e:	4807      	ldr	r0, [pc, #28]	; (800096c <wiper_speed_changes_8_Hz+0xa0>)
 8000950:	f7ff fe82 	bl	8000658 <GPIO_WriteToOutputPin>

			if (GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0))
 8000954:	2100      	movs	r1, #0
 8000956:	4806      	ldr	r0, [pc, #24]	; (8000970 <wiper_speed_changes_8_Hz+0xa4>)
 8000958:	f7ff fe68 	bl	800062c <GPIO_ReadFromInputPin>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <wiper_speed_changes_8_Hz+0x9a>
					return 1;
 8000962:	2301      	movs	r3, #1
 8000964:	e000      	b.n	8000968 <wiper_speed_changes_8_Hz+0x9c>
				else
					return 0;
 8000966:	2300      	movs	r3, #0
}
 8000968:	4618      	mov	r0, r3
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40020c00 	.word	0x40020c00
 8000970:	40020000 	.word	0x40020000

08000974 <wiper_off>:


void wiper_off(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	        GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_13);
 8000978:	210d      	movs	r1, #13
 800097a:	4811      	ldr	r0, [pc, #68]	; (80009c0 <wiper_off+0x4c>)
 800097c:	f7ff fe91 	bl	80006a2 <GPIO_ToggleOutputPin>
			delay();
 8000980:	f7ff fef8 	bl	8000774 <delay>
			GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_13, 0);
 8000984:	2200      	movs	r2, #0
 8000986:	210d      	movs	r1, #13
 8000988:	480d      	ldr	r0, [pc, #52]	; (80009c0 <wiper_off+0x4c>)
 800098a:	f7ff fe65 	bl	8000658 <GPIO_WriteToOutputPin>

			GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 800098e:	210c      	movs	r1, #12
 8000990:	480b      	ldr	r0, [pc, #44]	; (80009c0 <wiper_off+0x4c>)
 8000992:	f7ff fe86 	bl	80006a2 <GPIO_ToggleOutputPin>
			delay();
 8000996:	f7ff feed 	bl	8000774 <delay>
			GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_12, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	210c      	movs	r1, #12
 800099e:	4808      	ldr	r0, [pc, #32]	; (80009c0 <wiper_off+0x4c>)
 80009a0:	f7ff fe5a 	bl	8000658 <GPIO_WriteToOutputPin>

			GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_15);
 80009a4:	210f      	movs	r1, #15
 80009a6:	4806      	ldr	r0, [pc, #24]	; (80009c0 <wiper_off+0x4c>)
 80009a8:	f7ff fe7b 	bl	80006a2 <GPIO_ToggleOutputPin>
			delay();
 80009ac:	f7ff fee2 	bl	8000774 <delay>
			GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NO_15,0 );
 80009b0:	2200      	movs	r2, #0
 80009b2:	210f      	movs	r1, #15
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <wiper_off+0x4c>)
 80009b6:	f7ff fe4f 	bl	8000658 <GPIO_WriteToOutputPin>

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40020c00 	.word	0x40020c00

080009c4 <main>:
void delay_4_hz(void);
void delay_8_hz(void);


int main(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b090      	sub	sp, #64	; 0x40
 80009c8:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioLed, GpioLed1, GpioLed2, GpioLed3, GpioBtn;


	GpioLed.pGPIOx = GPIOD;
 80009ca:	4b60      	ldr	r3, [pc, #384]	; (8000b4c <main+0x188>)
 80009cc:	633b      	str	r3, [r7, #48]	; 0x30
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80009ce:	230c      	movs	r3, #12
 80009d0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80009d4:	2301      	movs	r3, #1
 80009d6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80009da:	2302      	movs	r3, #2
 80009dc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80009e0:	2300      	movs	r3, #0
 80009e2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	GPIO_PeriClockControl(GPIOD, ENABLE);
 80009e6:	2101      	movs	r1, #1
 80009e8:	4858      	ldr	r0, [pc, #352]	; (8000b4c <main+0x188>)
 80009ea:	f7ff fbfd 	bl	80001e8 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLed);
 80009ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fc7e 	bl	80002f4 <GPIO_Init>


	GpioLed1.pGPIOx = GPIOD;
 80009f8:	4b54      	ldr	r3, [pc, #336]	; (8000b4c <main+0x188>)
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
	GpioLed1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80009fc:	230d      	movs	r3, #13
 80009fe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GpioLed1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000a02:	2301      	movs	r3, #1
 8000a04:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	GpioLed1.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	GpioLed1.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GPIO_PeriClockControl(GPIOD, ENABLE);
 8000a14:	2101      	movs	r1, #1
 8000a16:	484d      	ldr	r0, [pc, #308]	; (8000b4c <main+0x188>)
 8000a18:	f7ff fbe6 	bl	80001e8 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLed1);
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fc67 	bl	80002f4 <GPIO_Init>


	GpioLed2.pGPIOx = GPIOD;
 8000a26:	4b49      	ldr	r3, [pc, #292]	; (8000b4c <main+0x188>)
 8000a28:	61bb      	str	r3, [r7, #24]
	GpioLed2.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000a2a:	230e      	movs	r3, #14
 8000a2c:	773b      	strb	r3, [r7, #28]
	GpioLed2.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	777b      	strb	r3, [r7, #29]
	GpioLed2.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a32:	2302      	movs	r3, #2
 8000a34:	77bb      	strb	r3, [r7, #30]
	GpioLed2.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000a36:	2300      	movs	r3, #0
 8000a38:	f887 3020 	strb.w	r3, [r7, #32]
	GPIO_PeriClockControl(GPIOD, ENABLE);
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	4843      	ldr	r0, [pc, #268]	; (8000b4c <main+0x188>)
 8000a40:	f7ff fbd2 	bl	80001e8 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLed2);
 8000a44:	f107 0318 	add.w	r3, r7, #24
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fc53 	bl	80002f4 <GPIO_Init>


	GpioLed3.pGPIOx = GPIOD;
 8000a4e:	4b3f      	ldr	r3, [pc, #252]	; (8000b4c <main+0x188>)
 8000a50:	60fb      	str	r3, [r7, #12]
	GpioLed3.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000a52:	230f      	movs	r3, #15
 8000a54:	743b      	strb	r3, [r7, #16]
	GpioLed3.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000a56:	2301      	movs	r3, #1
 8000a58:	747b      	strb	r3, [r7, #17]
	GpioLed3.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	74bb      	strb	r3, [r7, #18]
	GpioLed3.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	753b      	strb	r3, [r7, #20]
	GPIO_PeriClockControl(GPIOD, ENABLE);
 8000a62:	2101      	movs	r1, #1
 8000a64:	4839      	ldr	r0, [pc, #228]	; (8000b4c <main+0x188>)
 8000a66:	f7ff fbbf 	bl	80001e8 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLed3);
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fc40 	bl	80002f4 <GPIO_Init>


	GpioBtn.pGPIOx = GPIOA;
 8000a74:	4b36      	ldr	r3, [pc, #216]	; (8000b50 <main+0x18c>)
 8000a76:	603b      	str	r3, [r7, #0]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	713b      	strb	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	717b      	strb	r3, [r7, #5]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a80:	2302      	movs	r3, #2
 8000a82:	71bb      	strb	r3, [r7, #6]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000a84:	2300      	movs	r3, #0
 8000a86:	71fb      	strb	r3, [r7, #7]
	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000a88:	2101      	movs	r1, #1
 8000a8a:	4831      	ldr	r0, [pc, #196]	; (8000b50 <main+0x18c>)
 8000a8c:	f7ff fbac 	bl	80001e8 <GPIO_PeriClockControl>
	GPIO_Init(&GpioBtn);
 8000a90:	463b      	mov	r3, r7
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fc2e 	bl	80002f4 <GPIO_Init>
	uint32_t count=0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	63fb      	str	r3, [r7, #60]	; 0x3c

	while (1)
	{
		GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_0, DISABLE);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	482b      	ldr	r0, [pc, #172]	; (8000b50 <main+0x18c>)
 8000aa2:	f7ff fdd9 	bl	8000658 <GPIO_WriteToOutputPin>
		if (GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0))
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4829      	ldr	r0, [pc, #164]	; (8000b50 <main+0x18c>)
 8000aaa:	f7ff fdbf 	bl	800062c <GPIO_ReadFromInputPin>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d0f3      	beq.n	8000a9c <main+0xd8>
		{
			count++;
 8000ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
		   if (count == 1)
 8000aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d108      	bne.n	8000ad2 <main+0x10e>
			{
				delay();
 8000ac0:	f7ff fe58 	bl	8000774 <delay>
				ACC_mode_on();
 8000ac4:	f7ff fe98 	bl	80007f8 <ACC_mode_on>
				GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_RESET);
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4821      	ldr	r0, [pc, #132]	; (8000b50 <main+0x18c>)
 8000acc:	f7ff fdae 	bl	800062c <GPIO_ReadFromInputPin>
 8000ad0:	e7e4      	b.n	8000a9c <main+0xd8>
			}
		    else if(count == 2)
 8000ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	d109      	bne.n	8000aec <main+0x128>
			{
		    	while(count==2){
 8000ad8:	e004      	b.n	8000ae4 <main+0x120>
		    		if(wiper_on()==1){
 8000ada:	f7ff fdf7 	bl	80006cc <wiper_on>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d02d      	beq.n	8000b40 <main+0x17c>
		    	while(count==2){
 8000ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d0f7      	beq.n	8000ada <main+0x116>
 8000aea:	e7d7      	b.n	8000a9c <main+0xd8>
		    			break;
		    		}
		    	}

			}
			else if(count == 3)
 8000aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000aee:	2b03      	cmp	r3, #3
 8000af0:	d109      	bne.n	8000b06 <main+0x142>
			{
				while(count==3){
 8000af2:	e004      	b.n	8000afe <main+0x13a>
					if(wiper_speed_changes_4_Hz()==1){
 8000af4:	f7ff fe96 	bl	8000824 <wiper_speed_changes_4_Hz>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d022      	beq.n	8000b44 <main+0x180>
				while(count==3){
 8000afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b00:	2b03      	cmp	r3, #3
 8000b02:	d0f7      	beq.n	8000af4 <main+0x130>
 8000b04:	e7ca      	b.n	8000a9c <main+0xd8>
						break;
					}
				}
			}
			else if(count == 4)
 8000b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b08:	2b04      	cmp	r3, #4
 8000b0a:	d109      	bne.n	8000b20 <main+0x15c>
			{
				while(count==4){
 8000b0c:	e004      	b.n	8000b18 <main+0x154>
					if(wiper_speed_changes_8_Hz()==1){
 8000b0e:	f7ff fedd 	bl	80008cc <wiper_speed_changes_8_Hz>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d017      	beq.n	8000b48 <main+0x184>
				while(count==4){
 8000b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	d0f7      	beq.n	8000b0e <main+0x14a>
 8000b1e:	e7bd      	b.n	8000a9c <main+0xd8>
						break;
					}
				}

			}
			else if(count == 5){
 8000b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b22:	2b05      	cmp	r3, #5
 8000b24:	d102      	bne.n	8000b2c <main+0x168>
				wiper_off();
 8000b26:	f7ff ff25 	bl	8000974 <wiper_off>
 8000b2a:	e7b7      	b.n	8000a9c <main+0xd8>
			}
			else if(count==6){
 8000b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b2e:	2b06      	cmp	r3, #6
 8000b30:	d1b4      	bne.n	8000a9c <main+0xd8>
				delay();
 8000b32:	f7ff fe1f 	bl	8000774 <delay>
				igniton_off();
 8000b36:	f7ff fe69 	bl	800080c <igniton_off>
				count=0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b3e:	e7ad      	b.n	8000a9c <main+0xd8>
		    			break;
 8000b40:	bf00      	nop
 8000b42:	e7ab      	b.n	8000a9c <main+0xd8>
						break;
 8000b44:	bf00      	nop
 8000b46:	e7a9      	b.n	8000a9c <main+0xd8>
						break;
 8000b48:	bf00      	nop
		GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_0, DISABLE);
 8000b4a:	e7a7      	b.n	8000a9c <main+0xd8>
 8000b4c:	40020c00 	.word	0x40020c00
 8000b50:	40020000 	.word	0x40020000

08000b54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b56:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b58:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b5c:	480c      	ldr	r0, [pc, #48]	; (8000b90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b5e:	490d      	ldr	r1, [pc, #52]	; (8000b94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b60:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <LoopForever+0xe>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b64:	e002      	b.n	8000b6c <LoopCopyDataInit>

08000b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6a:	3304      	adds	r3, #4

08000b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b70:	d3f9      	bcc.n	8000b66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b72:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b74:	4c0a      	ldr	r4, [pc, #40]	; (8000ba0 <LoopForever+0x16>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b78:	e001      	b.n	8000b7e <LoopFillZerobss>

08000b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b7c:	3204      	adds	r2, #4

08000b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b80:	d3fb      	bcc.n	8000b7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b82:	f000 f811 	bl	8000ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b86:	f7ff ff1d 	bl	80009c4 <main>

08000b8a <LoopForever>:

LoopForever:
    b LoopForever
 8000b8a:	e7fe      	b.n	8000b8a <LoopForever>
  ldr   r0, =_estack
 8000b8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b94:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000b98:	08000c10 	.word	0x08000c10
  ldr r2, =_sbss
 8000b9c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000ba0:	2000001c 	.word	0x2000001c

08000ba4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC_IRQHandler>
	...

08000ba8 <__libc_init_array>:
 8000ba8:	b570      	push	{r4, r5, r6, lr}
 8000baa:	4d0d      	ldr	r5, [pc, #52]	; (8000be0 <__libc_init_array+0x38>)
 8000bac:	4c0d      	ldr	r4, [pc, #52]	; (8000be4 <__libc_init_array+0x3c>)
 8000bae:	1b64      	subs	r4, r4, r5
 8000bb0:	10a4      	asrs	r4, r4, #2
 8000bb2:	2600      	movs	r6, #0
 8000bb4:	42a6      	cmp	r6, r4
 8000bb6:	d109      	bne.n	8000bcc <__libc_init_array+0x24>
 8000bb8:	4d0b      	ldr	r5, [pc, #44]	; (8000be8 <__libc_init_array+0x40>)
 8000bba:	4c0c      	ldr	r4, [pc, #48]	; (8000bec <__libc_init_array+0x44>)
 8000bbc:	f000 f818 	bl	8000bf0 <_init>
 8000bc0:	1b64      	subs	r4, r4, r5
 8000bc2:	10a4      	asrs	r4, r4, #2
 8000bc4:	2600      	movs	r6, #0
 8000bc6:	42a6      	cmp	r6, r4
 8000bc8:	d105      	bne.n	8000bd6 <__libc_init_array+0x2e>
 8000bca:	bd70      	pop	{r4, r5, r6, pc}
 8000bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bd0:	4798      	blx	r3
 8000bd2:	3601      	adds	r6, #1
 8000bd4:	e7ee      	b.n	8000bb4 <__libc_init_array+0xc>
 8000bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bda:	4798      	blx	r3
 8000bdc:	3601      	adds	r6, #1
 8000bde:	e7f2      	b.n	8000bc6 <__libc_init_array+0x1e>
 8000be0:	08000c08 	.word	0x08000c08
 8000be4:	08000c08 	.word	0x08000c08
 8000be8:	08000c08 	.word	0x08000c08
 8000bec:	08000c0c 	.word	0x08000c0c

08000bf0 <_init>:
 8000bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bf2:	bf00      	nop
 8000bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bf6:	bc08      	pop	{r3}
 8000bf8:	469e      	mov	lr, r3
 8000bfa:	4770      	bx	lr

08000bfc <_fini>:
 8000bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfe:	bf00      	nop
 8000c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c02:	bc08      	pop	{r3}
 8000c04:	469e      	mov	lr, r3
 8000c06:	4770      	bx	lr
